每个模型映射到单个数据库表
创建model的时候一个id字段被自动添加，但这种行为可以被覆盖。见自动主键字段。

继承：
（这里只适用django）如果是抽象的，则可以重写父类的字段，不是抽象的，那么不能重写字段
class A(models.Model):
    first_name = models.CharField(max_length=30)
    class Meta:
        abstract = True

class MyTestProxy(TestProxy):
    last_name = models.CharField(max_length=30)

使用 Model.objects.get(....)没有找到或者找到多个，都会raise一个error（Entry.DoesNotExist，MultipleObjectsReturned）

Model.objects.all()[:5] 返回前五个，不能是负数
Model.objects.order_by('item')[0]	按item排序，然后获取第一个
等价于：Model.objects.order_by('item')[0:1].get()

在查找中指定的字段必须是模型字段的名称 但是 ForeignKey例外， foreignModelname_itemname

查询
pub_date__lte ： <=
pub_date__gte ： >=
① exact 精确
Model.objects.get(headline__exact="Cat bites dog")
等价于：SELECT ... WHERE headline = 'Cat bites dog';
如果没有双下划线，查询类型就假定是exact
② iexact 不区分大小写
③ contains 包含，文档说分大小写，测试不分大小，可能和数据库有关，类似  SELECT ... WHERE headline LIKE '%Lennon%';
④ icontains. 不分大小的
⑤ startswith, endswith，istartswith iendswith. 测试，也没有区分大小

比较 item1 和 item2 + item3 * 3  
from django.db.models import F	F()支持 加法，减法，乘法，除法，模数和幂运算
Model.objects.filter(item1__lt=F('item2') + F('item3')*3)
Model.objects.filter(Model1__attribute=F('model__attribute'))	比如关联的外键model1和多对多的model2的属性比较

copy:
model = Model.objects.all()[0]
model.pk = None or model.id = None
model.save()	复制完成
但是如果 Model继承了一个model，那么model.pk = None and model.id = None, model.save()
外键如果有manyToMany 成员需要手动复制  model.authors = oldmodel.authors.all()

update:
(model.objects.filter(...))QuerySet.update(item = ...)
文档说没有调用save(),但是结果是已经写入数据库了,说是循环调用 iterate的save
翻译：对更新的QuerySet的唯一限制是它只能访问一个数据库表：模型的主表。 您可以根据相关字段进行过滤，但只能更新模型主表中的列
会报FieldError 错 Entry.objects.update(headline=F('blog__name')) 不能引入连接，只能引用要更新的模型的本地字段

select_related：获取外键不为None的QuerySet：Entry.objects.select_related().get(id=2)
外键访问主表， modelForeign.mainmodename_set.all() 可以通过设置参数related_name = "waijian"修改，modelForeign.waijian.all()

替换e1,e2的外键：b.entry_set.set([e1, e2])
many-to-many （我的理解，直接当QuerySet使用）e.authors.filter(name__contains='John')，不用提及model名，直接使用name

one-to-one： model1: a = oneToOne(model2) model2.model1(小写) 直接访问  
model2.model1 = b, b.a 就是model2了，原来的b.a变了,多个model2指向一个model1，但是model1只指向一个model1





????不懂的地方



ManyToManyField

Base class restrictions¶
A proxy model must inherit from exactly one non-abstract model class. You can’t inherit from multiple non-abstract models as the proxy model doesn’t provide any connection between the rows in the different database tables. A proxy model can inherit from any number of abstract model classes, providing they do not define any model fields. A proxy model may also inherit from any number of proxy models that share a common non-abstract parent class.


Field name “hiding” is not permitted

查询错误
pub_date__gte=datetime(2005, 1, 30)
反而 pub_date = datetime.date(2005,1,1)可以 这里的datetime 是  import datetime 来的
所以  pub_date__gte 返回的是个什么鬼

Model.objects.filter or exclude 不会查询数据库
q = Entry.objects.filter(headline__startswith="What")
q = q.filter(pub_date__lte=datetime.date.today())
q = q.exclude(body_text__icontains="food")
print(q)
只有在print的时候，才会查询数据库

Entry.objects.all()[:10:2] 返回的什么鬼

Blog.objects.filter(entry__headline__contains='Lennon', entry__pub_date__year=2008)
文档说：上面是  包含lennon并且2008，下面是  包含lennon和2008 ，测试下来，都是 包含lennon并且2008
Blog.objects.filter(entry__headline__contains='Lennon').filter(entry__pub_date__year=2008)


QuerySet缓存问题
为了效率，一定要记录 queryset = Entry.objects.all()
print(queryset[5])，查询数据库，没有缓存
以下操作，就有了缓存
[entry for entry in queryset]
print(queryset[5]) 有了缓存了，使用缓存
bool(queryset)
entry in queryset
list(queryset)

e = Entry.objects.get(id=2)但是怀疑在这里已经访问了数据库
print(e.blog)  # Hits the database to retrieve the 

Using a custom reverse manager

one-to-many 就是外键？









