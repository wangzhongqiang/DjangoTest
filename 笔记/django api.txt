
annotate
from django.db.models import Count
q = Blog.objects.annotate(Count('modelname or related_name') 或 customName = Count('modelname or related_name'))
Entity有外键Blog，如果Blog没有设置related_name那么这里就是entity，如果设置related_name，那么这里就是这个related_name
q是一个QuerySet, q[0]就是blog  q[0].name  (q[0].modelname 或 related_name + "__count") 或 q[0].customName__count 引用这个q[0] 的model个数

order_by("-date") 降序，order_by('?')随机，效率比较慢
my_queryset.reverse()[:5] 如果my_queryset本身有排序，则reverse起作用（比如，model.objects.all()就没有作用）

values()： 
model.objects.values() 返回所有信息，
values('itemname1','itemname2',....) itemname1和itemname2信息
外键: values('model__id' , 'model' , 'model__itemname') (‘id’，‘id’， ‘item值’)
values_list('id', flat = True)一个参数才能使用flat 
values_list('id', flat = True).get(pk=1) 返回具体实例
当values和values_list ：参数为（one-to-many relation of a reverse foreign key 或 ManyToManyField）找不到值，显示为none

dates：year 只显示year且year不重复； month 显示年月 且年月不重复 ， day 显示年月日，年月日不重复
model.objects.dates('itemname日期类型的', 'year 或 month 或 day'， order = 'DESC 或 ASC')
datetime：用法和dates差不多，但是时区没有搞懂怎么改
select_related：e = Entry.objects.get(id=5)， b = e.blog 访问外键时，两次查询数据库 e = Entry.objects.select_related('blog').get(id=5)，b = e.blog 只第一次访问数据库
select_related(None)：返回所有的外键

defer: 延迟加载 Model.objects.defer("headline", "body") Blog.objects.select_related().defer("entry__headline", "entry__body")
my_queryset.defer(None) 清除延迟字段集
如果save，那么只保存加载了的字段

only：只加载，一般id都是要的，
Model.objects.only("pub_date").only('headline') 只加载后一个，前一个only白费，但是，这个model不知怎么了，总是要加在headline，所以，又会单独一个一个调headline查询

get_or_create： (obj, created) = Model.objects.get_or_create(itemname1 = ..., defaults = {'itemname2':......})
在django视图中使用，多用post，不用get
class Chapter:name unique ; class Book: chapters manyToMany Chapter	有实例 book1.chapters.get_or_create(name = )
如果name的值和chapter和book有关系，那么 可以 false和true，如果没有关系，那么可以create，但是有的话，get会报错
update_or_create： 更新数据
obj, created = Person.objects.update_or_create(
    name='John',
    defaults={'name': 'Bob'},
)

bulk_create： 批量创建
Entry.objects.bulk_create([    Entry(headline="Django 1.0 Released"),    Entry(headline="Breaking: Django is awesome") ])

count():
如果QuerySet还没有在内存中，那么使用count比较好，如果已经在内存中，那么  len(QuerySet) 比较快（不需要数据库查询），然后迭代什么的，用到计数都可以用len

in_bulk	：Blog.objects.in_bulk([1,2,3] 或 [] 或 没有)
返回  {1：obj, 2: obj},没找到返回  {}, 无参 返回所有

iterator() 大量只需访问一次的对象，可以用这个，性能和内存都好处
自己测试了下： m = model.objecets.iterator(); for e in m: print e; 有输出，再for一次，却没有了, all()却是一直保持的

latest , earliest
model.objects.latest('itemname') ，说是传日期，测试下来，就是按这个参数排序，取第一或最后一个
first ， last
model.objects.first() 排完序后的第一个或最后一个

aggregate ['?gr?g?t; (for v.) ??gr?ge?t] vi. 集合；聚集；合计
from django.db.models import Count
Blog.objects.aggregate(Count('entry')) 						{'entry__count': 16}
Blog.objects.aggregate(number_of_entries=Count('entry')) 	{'number_of_entries': 16}

exists()
QuerySet.exists(), 更快： itemname in querySet , 如果内存已有了，那更快方法： if my_queryset: 
还有if bool(my_queryset)

update：外键不能更新
Entry.objects.filter(pub_date__year=2010).update(comments_on=False, headline='This is old')









？？？？？？？？？？？？？？
排序这里 Coalesce用法
order_by()有多个条件怎么排序

distinct 忽略重复数据，当前数据库不支持，未测试
Author.objects.distinct()
Entity.objects.order_by('pub_date').distinct('pub_date')
Entity.objects.order_by('blog').distinct('blog')
Entity.objects.order_by('author', 'pub_date').distinct('author', 'pub_date')
Entity.objects.order_by('blog__name', 'mod_date').distinct('blog__name', 'mod_date')
Entity.objects.order_by('author', 'pub_date').distinct('author')

defer：不能延迟主键，试了，也没报错，外键和主表相连的字段

only：
Entry.objects.only("headline", "body").defer("body") 只加载headl
Entry.objects.defer("body").only("headline", "body")两个都加载		....实际结果是两个效果一样，再说

using：database的别名

select_for_update() : 锁定列， select_for_update(nowait = True)，则called无阻碍， nowait的支持主要看数据库的平台
支持的数据库在自动提交模式下有可能会出错，不支持的数据库在自动提交模式中不会出错

raw 原生sql查询语句

bulk_create：提到的一些注意事项，batch_size 貌似没用

什么是queryset slice taken



